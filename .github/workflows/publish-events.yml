name: Build Docker for Events

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
  schedule:
    - cron: '43 11 * * *'
  push:
    branches: [ main ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
    paths:
      - 'events/**'
      - 'Dockerfile-Events'
      - '.github/workflows/publish-events.yml'
      - 'infrastructure/events.yml'
      - 'yarn.lock'
#  pull_request:
#    branches: [ main ]
#    paths:
#      - 'events/**'
#      - 'Dockerfile-Events'
#      - '.github/workflows/publish-events.yml'
#      - 'infrastructure/events.yml'
#      - 'yarn.lock'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::sha-$(git rev-parse --short HEAD)"

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@48866aa521d8bf870604709cd43ec2f602d03ff2
        with:
          cosign-release: 'v1.4.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/events
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - run: perl -pi -e 's/prod/"$ENV{VERSION}"/' events/src/environments/environment.prod.ts
        env:
          VERSION: ${{ steps.vars.outputs.sha_short }}

#      - name: Update version in environment
#        uses: jacobtomlinson/gha-find-replace@v2
#        with:
#          include: events/src/environments/environment.prod.ts
#          find: 'prod'
#          replace: ${{ steps.vars.outputs.sha_short }}
#          regex: false

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@1cb9d22b932e4832bb29793b7777ec860fc1cde0
        with:
          file: Dockerfile-Events
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/events@${{ steps.build-and-push.outputs.digest }}
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://beta.esn.world
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: update image tag in deployment file
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: infrastructure/events.yml
          find: 'main'
          replace: ${{ needs.build.outputs.sha_short }}

      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Installing containerapp extension"
            az extension add -n containerapp --yes
            echo "Starting Deploying"
            az containerapp update -n events -g tumi-container --yaml $GITHUB_WORKSPACE/infrastructure/events.yml

  release:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare yarn
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn workspace @tumi/events install

      - name: Build browser bundle
        run: yarn workspace @tumi/events ng build --source-map

      - name: Build server bundle
        run: yarn workspace @tumi/events ng run tumi-events:server --source-map

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        with:
          environment: production
          ignore_empty: true
          projects: events events-ssr
          sourcemaps: events/dist
          version: ${{ needs.build.outputs.sha_short }}
